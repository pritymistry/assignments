------oops-rectangle----

#include <graphics.h>
#include <iostream.h>
#include <conio.h>

class point
{
    public:
    int x1;
    int y1;
    int i;

    virtual void set()
    {
    cout<<"Enter  Value of X1:";
    cin>>x1;
    cout<<"Enter  Value of Y1:";
    cin>>y1;
    }


    virtual void draw(){
	putpixel(x1,y1,WHITE);
    }

    virtual void print(){
	cout<<"\n Point"<<endl;
	cout<<"x1:"<<x1<<" y1:"<<y1<<endl;
    }
};

class line1 : public point
{
    public:
    int x2;
    int y2;

    void set()
    {
    cout<<"Enter  Value of X1:";
    cin>>x1;
    cout<<"Enter  Value of Y1:";
    cin>>y1;
    cout<<"Enter  Value of X2:";
    cin>>x2;
    cout<<"Enter  Value of Y2:";
    cin>>y2;
    }


    void draw(){
	if((x1==x2)||(y1==y2)){
		line(x1,y1,x2,y2);
//	    if(x1==x2){
//		for(i=y1;i<=y2;i++){
//		    putpixel(x1,i,WHITE);
//		}
//	    }else if(y1==y2){
//		for(i=x1;i<=x2;i++){
//		    putpixel(i,y1,WHITE);
//		}
//	    }
	}
    }

    void print(){
	cout<<"\n Line"<<endl;
	cout<<"x1:"<<x1<<" y1:"<<y1<<" x2:"<<x2<<" y2:"<<y2<<endl;
    }
};


class rectangle1 : public line1
{
    public:
    void set()
    {
    cout<<"Enter  Value of X1:";
    cin>>x1;
    cout<<"Enter  Value of Y1:";
    cin>>y1;
    cout<<"Enter  Value of X2:";
    cin>>x2;
    cout<<"Enter  Value of Y2:";
    cin>>y2;
    }


    void draw(){
	    rectangle(x1,y1,x2,y2);
//	    for(i=y1;i<=y2;i++){
//		putpixel(x1,i,WHITE);
//	    }
//	    for(i=x1;i<=x2;i++){
//		putpixel(i,y1,WHITE);
//	    }
//	    for(i=x1;i<=x2;i++){
//		putpixel(i,y2,WHITE);
//	    }
//	    for(i=y1;i<=y2;i++){
//		putpixel(x2,i,WHITE);
//	    }
    }

    void print(){
	cout<<"\n rectangle"<<endl;
	cout<<"x1:"<<x1<<" y1:"<<y1<<" x2:"<<x2<<" y2:"<<y2<<endl;
    }
};

class node{
	public:
	point* p;
	node* next;

	node(point* a){
		this->p=a;
		this->next=NULL;
	}
};

class linkedlist{
	node* head;
	public:
	linkedlist(){
		head=NULL;
	}

	void insertNode(point*);
	void printList();
	void deleteNode(int);
	void drawByIndex(int);
};

void linkedlist::insertNode(point* a)
{
	node* newNode = new node(a);

	if (head==NULL)
	{
		head=newNode;
		return;
	}

	node* temp=head;
	while(temp->next!=NULL){
		temp=temp->next;
	}

	temp->next=newNode;
};

void linkedlist::printList()
{
	int index=1;
	node* temp=head;

	if(head==NULL){
		cout<<"Linked List Empty"<<endl;
		return;
	}

	while(temp!=NULL){
		cout<<index;
		temp->p->print();
		temp= temp->next;
		index++;
	}
};

void linkedlist::drawByIndex(int a)
{
	int index=1;
	node* temp=head;

	if(head==NULL){
		cout<<"List is Empty Cannot Draw"<<endl;
		return;
	}

	if(a==1){
		head->p->draw();
		return;
	}

	while(index!=a){
		index++;
		temp=temp->next;
	}

	temp->p->draw();
	return;
}

void linkedlist::deleteNode(int a)
{
	int index=1;
	node* temp=head;
	node* temp1=NULL;

	if(head==NULL){
		cout<<"List is Empty Cannot Delete"<<endl;
		return;
	}

	while(temp!=NULL){
		index++;
		temp=temp->next;
	}

	if(index<a){
		cout<<"Index out Of Range"<<endl;
		return;
	}

	temp=head;

	if(a=1){
		head=head->next;
		delete temp;
		return;
	}

	while(a-- > 1){
		temp1 = temp;
		temp=temp->next;
	}

	temp1->next = temp->next;

	delete temp;
	return;
}
main(){
    int n,choice,uinput;
    choice=5;
    int gd=DETECT,gm,color;
    linkedlist list;
    clrscr();
    do{
    cout<<"Enter 1) To Create a Shape and Store "<<endl;
    cout<<"Enter 2) To Print List Of Shapes Stored"<<endl;
    cout<<"Enter 3) To Delete a Shape From Linked List"<<endl;
    cout<<"Enter 4) To Draw Shape From Linked List"<<endl;
    cout<<"Enter 0) To Exit"<<endl;
    cin>>choice;
    switch(choice)
    {
	case 1:

		initgraph(&gd,&gm,"C:\\\\TC\\BGI");
		point *p,a;
		line1 l1;
		rectangle1 r1;
		cout<<"Enter 1) to draw a point"<<endl<<"Enter 2)To Draw a Line"<<endl<<"Enter 3)To Draw a Rectangle"<<endl;
		cin>>n;
		if(n==1)
		p=&a;
		if(n==2)
		p=&l1;
		if(n==3)
		p=&r1;
		p->set();
		p->draw();
		list.insertNode(p);
		getch();
		closegraph();
		break;
	case 2:
		list.printList();
		break;
	case 3:
		list.printList();
		cout<<"Enter Index Number to Delete A Shape"<<endl;
		cin>>uinput;
		list.deleteNode(uinput);
		list.printList();
		break;
	case 4:
		list.printList();
		cout<<"Enter Index Number To Draw A Shape from List"<<endl;
		cin>>uinput;
		initgraph(&gd,&gm,"C:\\\\TC\\BGI");
		list.drawByIndex(uinput);
		getch();
		closegraph();
		break;
	case 0:
		return 0;
	default:
		cout<<"Enter a Valid Choice"<<endl;
		break;
    }
    }while(choice!=0);
    return 0;
}


------ds-6------

public class Linklist_Q6_By_Yug {

    static Scanner sc = new Scanner(System.in);
    node head;

    class node {
        int rno, marks;
        String nm;
        node next;

        node(int rno, String nm, int marks) {
            this.rno = rno;
            this.nm = nm;
            this.marks = marks;
        }
    }

    public void Insert(int rno, String nm, int marks) {
        node newnode = new node(rno, nm, marks);
        if (head == null) {
            head = newnode;
            return;
        }
        if (newnode.marks > head.marks) {
            newnode.next = head;
            head = newnode;
            return;
        }
        node temp = head;
        node prev = null;
        while (temp != null && temp.marks > newnode.marks) {
            prev = temp;
            temp = temp.next;
        }
        prev.next = newnode;
        newnode.next = temp;
    }

    public void display() {
        if (head == null) {
            System.out.println("List is Empty");
            return;
        }
        node temp = head;
        System.out.println("RollNo\tName\tmarks");
        while (temp != null) {
            System.out.println(temp.rno + "\t" + temp.nm + "\t" + temp.marks);
            temp = temp.next;
        }
    }

    public static void main(String[] args) {

        Linklist_Q6_By_Yug obj = new Linklist_Q6_By_Yug();
        int ch, rno, marks;
        String nm;
        do {
            System.out.println("1.\3Insertion.\n2.\3Display.\n\3 3.Exit");
            System.out.println("Enter Your Choice");
            ch = sc.nextInt();
            switch (ch) {
                case 1:
                    System.out.println("Enter Your Roll No : ");
                    rno = sc.nextInt();
                    System.out.println("Enter Your Name : ");
                    nm = sc.next();
                    System.out.println("Enter Your Marks : ");
                    marks = sc.nextInt();
                    obj.Insert(rno, nm, marks);
                    break;
                case 2:
                    obj.display();
                    break;
                case 3:
                    System.exit(0);
                    break;
                default:
                    System.out.println("Enter Valid Choice...");
            }
        } while (ch != 5);

    }

}


--------ds-7------
package Wankhede_CE;

import java.util.*;

public class Linklist_Q7_BY_Yug {
    static Scanner sc = new Scanner(System.in);
    node head;

    class node {
        int rno, marks;
        String nm, email;
        node next;

        node(int rno, String nm, String email, int marks) {
            this.rno = rno;
            this.nm = nm;
            this.email = email;
            this.marks = marks;
        }
    }

    public void insert(int rno, String nm, String email, int marks) {
        node newnode = new node(rno, nm, email, marks);
        // if linklist is empty then newnode assigned to head
        if (head == null) {
            head = newnode;
            return;
        }
        // campare with head value according to aascending order
        if ((newnode.nm).compareTo(head.nm) < 0) {
            newnode.next = head;
            head = newnode;
            return;
        }
        node temp = head;
        node prev = head;
        while (temp != null && (newnode.nm).compareTo(temp.nm) > 0) {
            prev = temp;
            temp = temp.next;
        }
        prev.next = newnode;
        newnode.next = temp;
        // if linlist has some value than compare and add to respetive position
    }

    public void delete(int rno) {
        if (head == null) {
            System.out.println("\n Linklist is empty.....");
            return;
        }
        node temp = head;
        node prev = null;
        while (temp != null && temp.rno != rno) {
            prev = temp;
            temp = temp.next;
        }
        if (temp == null) {
            System.out.println("specified Number is not Exists in Linked List....");
            return;
        }
        prev.next = temp.next;
    }

    public void display() {
        if (head == null) {
            System.out.println("Linklist is Empty.....");
            return;
        } else {
            node temp = head;
            System.out.println("RollNo\t\tName\t\tEmail\t\tMarks\n");
            while (temp != null) {
                System.out.println(temp.rno + "\t\t" + temp.nm + "\t\t" + temp.email + "\t\t" + temp.marks);
                temp = temp.next;
            }
        }
    }

    public static void main(String[] args) {

        Linklist_Q7_BY_Yug obj = new Linklist_Q7_BY_Yug();
        int ch, rno, marks;
        String nm, email;

        do {
            System.out.println("\n---------Choice-----\n1.insertion\n2.Delete(By Roll Number)\n3.display\n4.Exit");
            System.out.println("Enter The Choice : ");
            ch = sc.nextInt();

            switch (ch) {
                case 1:
                    System.out.println("Enter Your Roll Number : ");
                    rno = sc.nextInt();
                    System.out.println("Enter Your Name : ");
                    nm = sc.next();
                    System.out.println("Enter Your Email : ");
                    email = sc.next();
                    System.out.println("Enter Your Marks : ");
                    marks = sc.nextInt();
                    obj.insert(rno, nm, email, marks);
                    break;
                case 2:
                    if (obj.head == null) {
                        System.out.println("Linklist is Empty....");
                    } else {
                        System.out.println("Enter the roll number of record which You want delete. ");
                        rno = sc.nextInt();
                        obj.delete(rno);
                    }
                    break;
                case 3:
                    obj.display();
                    break;
                case 4:
                    System.exit(0);
                    break;
                default:
                    System.out.println("Enter the valid Choice....");
            }

        } while (ch != 4);
    }
}



-------ds-8----------
package Wankhede_CE;

import java.util.*;

public class duublyLink_Q8_Yug {
    node start;

    class node {
        int id;
        String title;
        int price;
        node next = null;
        node prev = null;

        node(int i, String t, int p) {
            id = i;
            title = t;
            price = p;
        }
    }

    void insert() {
        Scanner sc = new Scanner(System.in);

        System.out.println("Enter Book Id :- ");
        int i = sc.nextInt();
        System.out.println("Enter Book Name :- ");
        String t = sc.next();
        System.out.println("Enter Book Price :- ");
        int p = sc.nextInt();

        node new_node = new node(i, t, p);
        if (start == null) {
            start = new_node;
        } else {
            start.prev = new_node;
            new_node.next = start;
            start = new_node;
        }
    }

    void delete() {
        Scanner sc = new Scanner(System.in);
        System.out.println("Enter Book Id :-");
        int i = sc.nextInt();
        if (start.id == i) {
            start = start.next;
            start.prev = null;
        } else {
            node temp = start;
            while (temp.next != null) {
                if ((temp.next).id == i) {
                    break;
                }
                temp = temp.next;
            }
            temp.next = (temp.next).next;
            (temp.next).prev = temp;
        }
    }

    void search() {
        Scanner sc = new Scanner(System.in);
        System.out.println("Enter Book Name : ");
        String i = sc.next();
        int f = 0;
        if ((start.title).equals(i)) {
            System.out.println(start.id + "" + start.title + "" + start.price);
        } else {
            node temp = start;
            while (temp.next != null) {
                if ((temp.title).equals(i)) {
                    f = 1;
                    break;
                }
                temp = temp.next;
            }
            if (f == 1)
                System.out.println(temp.id + "" + temp.title + "" + temp.price);
            else
                System.out.println("Data Not Found");
        }
    }

    void display() {

        node temp = start;
        System.out.println("Book ID\t\tBook Name\tBook Price");
        while (temp != null) {
            System.out.println(temp.id + "\t\t" + temp.title + "\t\t" + temp.price);
            temp = temp.next;
        }
    }

    public static void main(String[] args) {

        duublyLink_Q8_Yug obj = new duublyLink_Q8_Yug();
        Scanner sc = new Scanner(System.in);
        int ch;

        do {
            System.out.println("1.Insertion");
            System.out.println("2.Delete");
            System.out.println("3.Search");
            System.out.println("4.Display");
            System.out.println("5.Exit");
            System.out.println("Enter Your Choice : ");
            ch = sc.nextInt();

            if (ch == 1) {
                obj.insert();
            } else if (ch == 2) {
                obj.delete();
            } else if (ch == 3) {
                obj.search();
            } else if (ch == 4) {
                obj.display();
            } else {
                System.out.println("Enter Valid Choice...");
            }

        } while (ch != 5);

    }

}


-------ds-9------

package Wankhede_CE;
import java.util.*;

public class SinglyCir_Q9_By_Yug{

    node start;
    class node{
        int pro_id;
        String Pro_name;
        float price;
        node next;
        node(int pro_id,String Pro_name,float price){
            this.pro_id = pro_id;
            this.Pro_name= Pro_name;
            this.price = price;
        }
    }
    node new_node(){
        Scanner sc = new Scanner(System.in);
        System.out.println("Enter Product Id : ");
        int pro_id = sc.nextInt();
        System.out.println("Enter Product Name : ");
        String Pro_name = sc.next();
        System.out.println("Enter Product Price : ");
        float price = sc.nextFloat();
        node new_node = new node(pro_id, Pro_name, price);
        return new_node;
    }
    void ins_last(){
        node new_node = new_node();
        if(start == null){
            start=new_node;
            new_node.next=start;
        }else{
            node temp=start;
            while(temp.next != start){
                temp=temp.next;
            }
            temp.next=new_node;
            new_node.next = start;
        }
    }
    void search(){
        Scanner sc = new Scanner(System.in);
        System.out.println("Enter Prodect Name : ");
        String Pro_name = sc.next();
        int f=0;
        if((start.Pro_name).equals(Pro_name)){
            System.out.println(start.pro_id+""+start.Pro_name+""+start.price);
        }else{
            node temp = start;
            while(temp != start){
                if(((temp.next).Pro_name).equals(Pro_name)){
                    f=1;
                    break;
                }
                temp=temp.next;
            }
            if(f==1)
                System.out.println(temp.pro_id+""+temp.Pro_name+""+temp.price);
            else
                System.out.println("Data Not Found");            
        }
    }
    void display(){
        node temp = start;
        while(temp.next != start){
            System.out.println(temp.pro_id+""+temp.Pro_name+""+temp.price);
            temp=temp.next; 
        }
        System.out.println(temp.pro_id+""+temp.Pro_name+""+temp.price);
    }
    public static void main(String[] args) {
        SinglyCir_Q9_By_Yug obj = new SinglyCir_Q9_By_Yug();
        Scanner sc = new Scanner(System.in);
        int ch;
        do{
            System.out.println("1.Insertion");
            System.out.println("2.search");
            System.out.println("3.Display");
            System.out.println("4.Exit");
            System.out.println("Enter Your Choice : ");
            ch = sc.nextInt();

            if (ch ==1) {
                obj.ins_last();
            }
            else if(ch == 2){
                obj.search();
            }
            else if(ch == 3){
                obj.display();
            }else{
                System.out.println("Enter Valid Choice....");
            }

        }while(ch != 4);
        
    }    
}


----ds-10----
package Wankhede_CE;
import java.util.*;

public class LinerQueue_Q10_By_Yug {
    static Scanner sc = new Scanner(System.in);
    class node{
        int data;
        node next;
        node(int data){
            this.data=data;
            this.next=null;
        }
    }
    node front=null;
    node rear=null;
    public void enqueue(int data){
        node toadd=new node(data);
        if(front==null){
            front=toadd;
            rear=toadd;
        }else{
            rear.next=toadd;
            rear=toadd;
        }
    }
    public void dequeue(){
        if(front==null){
            System.out.println("Underflow");
        }else{
            front=front.next;
        }
    }
    public void display(){
        node temp=front;
        while(temp != null){
            System.out.println(temp.data);
            temp=temp.next;
        }
    }
    public static void main(String[] args) {
        LinerQueue_Q10_By_Yug obj = new LinerQueue_Q10_By_Yug();
        int ch,data;
        do{
            System.out.println("1.Enqueue");
            System.out.println("2.Dequeue");
            System.out.println("3.Display");
            System.out.println("4.Exit");
            System.out.println("Enter Your Choice : ");
            ch=sc.nextInt();
            switch (ch) {
                case 1:
                    System.out.println("Enter data to enqueue : ");
                    data = sc.nextInt();
                    obj.enqueue(data);
                    break;                
                case 2:
                    obj.dequeue();
                    break;
                case 3:
                    obj.display();
                    break;
                case 4:
                    System.exit(0);
                    break;                                
                default:
                    System.out.println("Enter Valid Choice...");
            }
        }while(ch != 4);

    }
    
}




==============DBMS============




1.	Enter a Empno, check if the Empno exists or not and then display name and designation of the employee if the Empno exists, otherwise display appropriate message. Do not use Cursor and Exception.

DECLARE
     v_eno number(4);
     v_ename VARCHAR2(10);
     V_DESG CHAR(9);
     CNT NUMBER;
 BEGIN
     V_ENO:=:ENTEREMPNO;
     SELECT COUNT(*) INTO CNT FROM EMP
     WHERE EMPNO=V_ENO;
     IF CNT=0 THEN
       DBMS_OUTPUT.PUT_LINE('USER DOES NOT EXIST');
     ELSE
     SELECT ENAME,JOB INTO V_ENAME,V_DESG
     FROM EMP
     WHERE EMPNO=V_ENO;
     DBMS_OUTPUT.PUT_LINE('ENAME:'||V_ENAME||' '||'DESG:'||V_DESG);
     END IF;
  END;
 /


2.	Display details of all the employees without using a cursor. (Display only empno, ename, job, salary and manager’s name).

DECLARE
     V_ENO EMP.EMPNO%TYPE;
     V_ENM EMP.ENAME%TYPE;
     V_JOB EMP.JOB%TYPE;
     V_SAL EMP.SAL%TYPE;
     V_MGR EMP.MGR%TYPE;
   BEGIN
        DBMS_OUTPUT.PUT_LINE('EMPNO' ||' '||'ENAME'||' '||'JOB'||' '||'SALARY'||' '||'MANAGERNAME');
        FOR I IN(SELECT E.EMPNO V_ENO,E.ENAME V_ENM, E.JOB V_JOB,E.SAL V_SAL, E1.ENAME V_MGR FROM EMP E,EMP E1 WHERE E.MGR=E1.EMPNO)
        LOOP 
          DBMS_OUTPUT.PUT_LINE(I.V_ENO ||' '||I.V_ENM||' '||I.V_SAL||' '||I.V_JOB||' '||I.V_MGR);
       END LOOP;
   END;
   /


3.	Display department details & details of each employee in every department (i.e. department wise employee details). (Display only empno, ename, job & sal as details of employees). The report should be in following format. (Do not use Cursor). (NOTE: Ignore Departments not having any employee in the report).

Deptno: 99	Department Name: XXXXXXXXXX	Location: XXXXXXXXXX
Empno	Name	Designation	Salary

9999	XXXXXXX	XXXXXXXX	999999
		Total Salary:	999999
Highest Salary:	999999
Lowest Salary:	999999


DECLARE
     V_DNO DEPT.DEPTNO%TYPE;
     V_DNM DEPT.DNAME%TYPE;
     V_LOC DEPT.LOC%TYPE;
     V_ENO EMP.EMPNO%TYPE;
     V_ENM EMP.ENAME%TYPE;
     V_DESG EMP.JOB%TYPE;
     V_SAL EMP.SAL%TYPE;
     V_TOT_SAL EMP.SAL%TYPE;
     V_MAX_SAL EMP.SAL%TYPE;
     V_MIN_SAL EMP.SAL%TYPE;
   BEGIN
       FOR I IN(SELECT DEPTNO V_DNO,DNAME V_DNM,LOC V_LOC FROM DEPT WHERE DEPTNO IN (SELECT DEPTNO FROM EMP))
        LOOP
         DBMS_OUTPUT.PUT_LINE('Deptno:'||I.V_DNO ||' '||'Departmentname:'||I.V_DNM||' '||'Location:'||I.V_LOC);
          DBMS_OUTPUT.PUT_LINE('----------------------------------------------------------');
          DBMS_OUTPUT.PUT_LINE('EMPNO' ||' '||'ENAME'||' '||'JOB'||' '||'SAL');
          DBMS_OUTPUT.PUT_LINE('----------------------------------------------------------');
        FOR J IN(SELECT EMPNO V_ENO,ENAME V_ENM,JOB V_DESG,SAL V_SAL,DEPTNO V_DNO FROM EMP WHERE DEPTNO=I.V_DNO )
        LOOP 
        IF I.V_DNO=J.V_DNO THEN
           DBMS_OUTPUT.PUT_LINE(J.V_ENO ||' '||J.V_ENM||' '||J.V_DESG||' '||J.V_SAL);
        END IF;
        
       END LOOP;
        DBMS_OUTPUT.PUT_LINE('------------------------------------------------------------');
       SELECT SUM(SAL) ,MAX(SAL),MIN(SAL) INTO V_TOT_SAL,V_MAX_SAL,V_MIN_SAL FROM EMP 
       WHERE DEPTNO=I.V_DNO
       GROUP BY I.V_DNO;
DBMS_OUTPUT.PUT_LINE('TOTAL SALARY:'||V_TOT_SAL);
DBMS_OUTPUT.PUT_LINE('MAXIMUM SALARY:'||V_MAX_SAL);
DBMS_OUTPUT.PUT_LINE('MINIMUM SALARY:'||V_MIN_SAL);
       DBMS_OUTPUT.PUT_LINE('-------------------------------------------------------------');
       END LOOP;
   END;
   /


4.	Rewrite the code in ques. 2 using cursors. (Do not use FOR loop and parameterised cursor).

DECLARE
     V_ENO EMP.EMPNO%TYPE;
     V_ENM EMP.ENAME%TYPE;
     V_JOB EMP.JOB%TYPE;
     V_SAL EMP.SAL%TYPE;
     V_MGR EMP.MGR%TYPE;
   BEGIN
        DBMS_OUTPUT.PUT_LINE('EMPNO' ||' '||'ENAME'||' '||'JOB'||' '||'SALARY'||' '||'MANAGERNAME');
        FOR I IN(SELECT E.EMPNO V_ENO,E.ENAME V_ENM, E.JOB V_JOB,E.SAL V_SAL, E1.ENAME V_MGR FROM EMP E,EMP E1 WHERE E.MGR=E1.EMPNO)
        LOOP 
          DBMS_OUTPUT.PUT_LINE(I.V_ENO ||' '||I.V_ENM||' '||I.V_SAL||' '||I.V_JOB||' '||I.V_MGR);
       END LOOP;
   END;
   /


5.	Rewrite the code in ques. 3 using cursors. (Do not use FOR loop and parameterised cursor).

DECLARE
    CURSOR DEPTCUR  IS
        SELECT DISTINCT D.* 
        FROM DEPT D,EMP E 
        WHERE E.DEPTNO=D.DEPTNO;
    DNO EMP.DEPTNO%TYPE;
    CURSOR EMPCUR IS
        SELECT E1.*
        FROM EMP E1
        WHERE E1.DEPTNO=DNO;
    V_DEPT DEPT%ROWTYPE;
    V_EMP  EMP%ROWTYPE;
    V_TOTAL_SAL EMP.SAL%TYPE;
    V_MIN_SAL EMP.SAL%TYPE;
    V_MAX_SAL EMP.SAL%TYPE;
BEGIN
    OPEN DEPTCUR;
        LOOP
            FETCH DEPTCUR INTO V_DEPT;
            EXIT WHEN DEPTCUR%NOTFOUND;
                DBMS_OUTPUT.PUT_LINE('DEPTNO: '||V_DEPT.DEPTNO||'  DEPARTMENT NAME: '||V_DEPT.DNAME||' LOCATION: '||V_DEPT.LOC);
                DBMS_OUTPUT.PUT_LINE('');
                DBMS_OUTPUT.PUT_LINE('EMPNO            ENAME          JOB            SAL');
                DBMS_OUTPUT.PUT_LINE('------------------------------------------------------------');
                DNO := V_DEPT.DEPTNO;
    
    OPEN EMPCUR;
        LOOP
            FETCH EMPCUR INTO V_EMP;
            EXIT WHEN EMPCUR %NOTFOUND;
                DBMS_OUTPUT.PUT_LINE(RPAD(V_EMP.EMPNO,15)||RPAD(V_EMP.ENAME, 15) || RPAD(V_EMP.JOB, 15)||RPAD(V_EMP.SAL,15));
        END LOOP; 
    
        DBMS_OUTPUT.PUT_LINE('---------------------------------------------------------------------');
        SELECT SUM(SAL),MIN(SAL),MAX(SAL)  INTO V_TOTAL_SAL,V_MIN_SAL,V_MAX_SAL 
        FROM EMP
        WHERE DEPTNO=DNO;
        DBMS_OUTPUT.PUT_LINE('TOTAL SALARY   :  '||V_TOTAL_SAL);
        DBMS_OUTPUT.PUT_LINE('HIGHEST SALARY :  '||V_MAX_SAL);
        DBMS_OUTPUT.PUT_LINE('LOWEST  SALARY :  '||V_MIN_SAL);
        DBMS_OUTPUT.PUT_LINE('------------------------------------------');
    CLOSE EMPCUR;
    END LOOP;
    CLOSE DEPTCUR; 
END;
/

6.	Rewrite the code in ques. 2 using cursors (use FOR loop and parameterised cursor).

DECLARE
    V_ENO EMP.EMPNO%TYPE;
    V_ENM EMP.ENAME%TYPE;
    V_JOB EMP.JOB%TYPE;
    V_SAL EMP.SAL%TYPE;
    V_MGR VARCHAR2(30);
    CURSOR C1(V_MGR EMP.MGR%TYPE) IS(SELECT ENAME FROM EMP WHERE EMPNO=V_MGR);
 BEGIN
    DBMS_OUTPUT.PUT_LINE('EMPNO' ||'      '|| 'EmployeeName' ||'     ' || 'JOB' ||'      ' || 'SALARY' || '     ' || 'ManagerName');
                    DBMS_OUTPUT.PUT_LINE('--------------------------------------------------------------');
    FOR I IN(SELECT EMPNO V_ENO,ENAME V_ENM,JOB V_JOB,SAL V_SAL,MGR V_MGR FROM EMP)
    LOOP
        FOR J IN C1(I.V_MGR)
        LOOP
            DBMS_OUTPUT.PUT_LINE(I.V_ENO || '        ' || I.V_ENM || '        ' || I.V_JOB || '        ' || I.V_SAL || '        ' || J.ENAME);
        END LOOP;
    END LOOP;
END;
/


7.	Rewrite the code in ques. 3 using cursors (use FOR loop and parameterised cursor).

DECLARE
    V_ENO EMP.EMPNO%TYPE;
    V_ENM EMP.ENAME%TYPE;
    V_JOB EMP.JOB%TYPE;
    V_SAL EMP.SAL%TYPE;
    V_LOC DEPT.LOC%TYPE;
    V_DNO DEPT.DEPTNO%TYPE;
    V_DNM DEPT.DNAME%TYPE;
    
    SUM1 NUMBER:=0;
    MAX1 NUMBER:=0;
    MAX2 NUMBER:=0;
    CNT NUMBER:=0;
    CURSOR C1(V_DNO DEPT.DEPTNO%TYPE) IS(SELECT EMPNO V_ENO,ENAME V_ENM,JOB V_JOB,SAL V_SAL FROM EMP WHERE DEPTNO=V_DNO);
    CURSOR C2(V_DNO DEPT.DEPTNO%TYPE) IS(SELECT MAX(SAL) MAX1,SUM(SAL) SUM1,MIN(SAL) MIN1 FROM EMP WHERE DEPTNO=V_DNO);
BEGIN
    FOR I IN(SELECT DEPTNO V_DNO,DNAME V_DNM,LOC V_LOC FROM DEPT)
    LOOP
        SELECT COUNT(*) INTO CNT FROM EMP WHERE DEPTNO=I.V_DNO;
        IF CNT>0 THEN 
            DBMS_OUTPUT.PUT_LINE('');
            DBMS_OUTPUT.PUT_LINE('---------------------------------------------------------');
            DBMS_OUTPUT.PUT_LINE('DEPTNO: ' || I.V_DNO || '    ' ||'DEPARTMENT NAME: ' || I.V_DNM || '     '  ||'LOCATION: '|| I.V_LOC);
            DBMS_OUTPUT.PUT_LINE('EMPNO' || '      ' ||'EMP NAME' || '      ' ||'JOB' || '     ' ||'SALARY');           
            DBMS_OUTPUT.PUT_LINE('---------------------------------------------------------');
              
            FOR J IN C1(I.V_DNO)
            LOOP        
                DBMS_OUTPUT.PUT_LINE(J.V_ENO|| '     ' || J.V_ENM || '     ' || J.V_JOB || '      ' || J.V_SAL);
            END LOOP;
            DBMS_OUTPUT.PUT_LINE(' ');

            FOR K IN C2(I.V_DNO)
            LOOP 
                DBMS_OUTPUT.PUT_LINE('---------------------------------------------------------');
                DBMS_OUTPUT.PUT_LINE('                      TOTAL SALARY:   ' || K.SUM1);
                DBMS_OUTPUT.PUT_LINE('                      HIGHEST SALARY:     ' || K.MAX1);
                DBMS_OUTPUT.PUT_LINE('                      LOWEST SALARY:  ' || K.MIN1);
                DBMS_OUTPUT.PUT_LINE('--------------------------------------------------------------------');
            END LOOP;
        END IF;
    END LOOP;
END;
/



8.	Display employee wise, customer wise order details as shown in the                                                                      following format: Empno: 9999  Name: XXXXXX	Deptno: 99	Dept Name: XXXXX Custid	Name		City
999999	XXXXXXXXX	XXXXXXXX
Ordid	OrderDate	OrderAmount
9999	99/99/9999	999999.99
9999	99/99/9999	999999.99
Total Amount:	9999999.99
and so on...
999999	XXXXXXXXX	XXXXXXXX
Ordid	OrderDate	OrderAmount
9999	99/99/9999	999999.99
9999	99/99/9999	999999.99
 
Total Amount:	9999999.99
and so on…

DECLARE
    V_CID CUSTOMER.CUSTID%TYPE;
    V_CNM CUSTOMER.NAME%TYPE;
    V_CITY CUSTOMER.CITY%TYPE;
    V_ENO EMP.EMPNO%TYPE;
    V_ENM EMP.ENAME%TYPE;
    V_DNO DEPT.DEPTNO%TYPE; 
    V_DNM DEPT.DNAME%TYPE;
    V_OID ORD.ORDID%TYPE;
    V_ODATE ORD.ORDERDATE%TYPE;
    V_TOT ORD.TOTAL%TYPE;
    CNT NUMBER:=0;
    CNT2 NUMBER:=0;
    CURSOR C1 IS(SELECT E.EMPNO,E.ENAME,E.DEPTNO,D.DNAME INTO V_ENO,V_ENM,V_DNO,V_DNM FROM EMP E,DEPT D WHERE E.DEPTNO=D.DEPTNO);
    CURSOR C2 IS(SELECT CUSTID,NAME,CITY INTO V_CID,V_CNM,V_CITY FROM CUSTOMER WHERE REPID=V_ENO);
    CURSOR C3 IS(SELECT ORDID,ORDERDATE,TOTAL INTO V_OID,V_ODATE,V_TOT FROM ORD WHERE CUSTID=V_CID);

BEGIN
    OPEN C1;
    LOOP
        FETCH C1 INTO V_ENO,V_ENM,V_DNO,V_DNM;
        EXIT WHEN C1%NOTFOUND;
        SELECT COUNT(*) INTO CNT FROM CUSTOMER WHERE REPID=V_ENO;
        IF CNT>0 THEN
            DBMS_OUTPUT.PUT_LINE('');                                            
            DBMS_OUTPUT.PUT_LINE('----------------------------------------------------------------------');
            DBMS_OUTPUT.PUT_LINE('EMPNO.: ' || V_ENO || '    ' || 'NAME: ' || V_ENM || '    ' || 'DEPTNO: ' || '    ' || V_DNO || '     ' ||
             'DEPT NAME: ' || V_DNM);
            DBMS_OUTPUT.PUT_LINE('CUSTOMER ID' || '        ' || 'CUSTOMER NAME' || '        ' || 'CUSTOMER CITY');
            
            OPEN C2;
            LOOP
            FETCH C2 INTO V_CID,V_CNM,V_CITY ;
            EXIT WHEN C2%NOTFOUND;
                DBMS_OUTPUT.PUT_LINE('');
                DBMS_OUTPUT.PUT_LINE('----------------------------------------------------------------------');
                DBMS_OUTPUT.PUT_LINE(V_CID || '        '  || V_CNM || '        ' || V_CITY);
                SELECT COUNT(*) INTO CNT2 FROM ORD WHERE CUSTID=V_CID;
                IF CNT2>0 THEN
                    DBMS_OUTPUT.PUT_LINE('---------------------------------------------------------------------');
                    DBMS_OUTPUT.PUT_LINE('ORDER ID' || '        ' || 'ORDER DATE' || '        ' || 'TOTAL');

                    OPEN C3;
                                                    LOOP
                    FETCH C3 INTO V_OID,V_ODATE,V_TOT;
                    EXIT WHEN C3%NOTFOUND;
                        DBMS_OUTPUT.PUT_LINE(V_OID || '        ' || V_ODATE || '        ' || V_TOT);
                    END LOOP;

                    FOR K IN(SELECT SUM(V_TOT) AS SUM1 FROM ORD WHERE CUSTID=V_CID)
                    LOOP
                        DBMS_OUTPUT.PUT_LINE('----------------------------------------------------------------------');
                    DBMS_OUTPUT.PUT_LINE('TOATL AMOUNT: ' || K.SUM1);       
                    END LOOP;
                    CLOSE C3;
                END IF;
            END LOOP;
            CLOSE C2;
            DBMS_OUTPUT.PUT_LINE('----------------------------------------------------------------------');
        END IF;
    END LOOP;
    CLOSE C1;
END;
/

 
9.	Generate representative-wise (representative is an employee through whom the customers place order) report in following format:
Empno: 9999  Name: XXXXXX	Deptno: 99	Dept Name: XXXXX
CustId CustName	Total Orders	Total Order Amount

999999	XXXXXXXXXX	999	9,99,999.99


DECLARE
    V_CID CUSTOMER.CUSTID%TYPE;
    V_CNM CUSTOMER.NAME%TYPE;
    V_ENO EMP.EMPNO%TYPE;
    V_ENM EMP.ENAME%TYPE;
    V_DNO DEPT.DEPTNO%TYPE; 
    V_DNM DEPT.DNAME%TYPE;  
    CNT NUMBER:=0;
    TOT NUMBER:=0;
    TOT_SAL NUMBER:=0;
    CURSOR C1 IS(SELECT E.EMPNO V_ENO,E.ENAME V_ENM,E.DEPTNO V_DNO,D.DNAME V_DNM FROM EMP E,DEPT D WHERE E.DEPTNO=D.DEPTNO);
    CURSOR C2 IS(SELECT C.CUSTID V_CID,COUNT(O.ORDID) TOT,SUM(O.TOTAL) TOT_SAL FROM ORD O,CUSTOMER C 
    WHERE O.CUSTID=C.CUSTID 
    AND C.REPID=V_ENO GROUP BY C.CUSTID);
BEGIN
    OPEN C1;
    LOOP
        FETCH C1 INTO V_ENO,V_ENM,V_DNO,V_DNM;
        EXIT WHEN C1%NOTFOUND;
        SELECT COUNT(*) INTO CNT FROM CUSTOMER WHERE REPID=V_ENO;
        IF CNT>0 THEN
            DBMS_OUTPUT.PUT_LINE('');
                            DBMS_OUTPUT.PUT_LINE('');
            DBMS_OUTPUT.PUT_LINE('-------------------------------------------------------------------------');
            DBMS_OUTPUT.PUT_LINE('EMPNO.: ' || V_ENO || '        ' || 'NAME: ' || V_ENM || '        ' || 'DEPTNO: ' || '        ' || V_DNO || '        ' || 
                           'DEPT NAME: ' || V_DNM); 
            DBMS_OUTPUT.PUT_LINE('-------------------------------------------------------------------------');
            DBMS_OUTPUT.PUT_LINE('CUSTID'||'        '||'CNAME'||'        '||'TOTAL ORDER'||'        '||'TOTAL ORDER AMOUNT');
                                DBMS_OUTPUT.PUT_LINE('-------------------------------------------------------------------------');
    
            OPEN C2;
            LOOP
            FETCH C2 INTO V_CID,TOT,TOT_SAL;
            EXIT WHEN C2%NOTFOUND;
                
                SELECT NAME INTO V_CNM FROM CUSTOMER WHERE CUSTID=V_CID;
                DBMS_OUTPUT.PUT_LINE(V_CID || '        ' || V_CNM || '        ' || TOT || '        ' || TOT_SAL);
            END LOOP;
            CLOSE C2;
        END IF;
    END LOOP;               
    CLOSE C1;
END;
/




