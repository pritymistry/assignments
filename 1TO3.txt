----------1----------


#include<stdio.h>
#include<stdlib.h>
#include<conio.h>
void main()
{
int *my_ptr,i,num;
clrscr();
my_ptr = (int*) malloc(5*sizeof(int));
if(my_ptr)
{
printf("enter integer numbers : \n\n"); ;
for (i=0; i<5; i++)
{
scanf("%d",&num);
my_ptr[i] = num;
}
printf("The values\n\n" );
for ( i=0; i<5; i++)
{
printf("Value at position %d is %d\n",i,*(my_ptr+i));
}
free(my_ptr);
getch();
}
}



-------------------2------------------------


#include <stdio.h>
#include <stdlib.h> 
void main() {
   int row = 2, col = 3,num;
   int *arr = (int *)malloc(row * col * sizeof(int)); 
   int i, j;
   printf("enter numbers : \n");
   for (i = 0; i < row; i++){
      for (j = 0; j < col; j++){
	 scanf("%d",&num);
	 *(arr + i*col + j) = num;
      }
   }
   printf("The matrix elements are:\n");
   for (i = 0; i < row; i++) {
      for (j = 0; j < col; j++) {
	 printf("%d ", *(arr + i*col + j));
      }
      printf("\n");
   }
   free(arr);
   getch();
}









------------------------3--------------------------

#include<stdlib.h>
#include <stdio.h>
#include<conio.h>
void create();
void display();
void insert_end();
void delete_begin();
struct node
{
        int info;
        struct node *next;
};
struct node *start=NULL;
void main()
{
	int choice;
	clrscr();
	while(1){

		printf("\n----------------MENU----------------\n");
		printf("\n 1.Create\n");
		printf("\n 2.Display\n");
		printf("\n 3.Insert\n");
		printf("\n 4.Delete from beginning      \n");
		printf("\n 5.Exit       \n");
		printf("\n-------------------------------------\n");
		printf("Enter your choice:\t");
		scanf("%d",&choice);
		switch(choice)
		{
			case 1:
					create();
					break;
			case 2:
					display();
					break;
			case 3:
					insert_end();
					break;
			case 4:
					delete_begin();
					break;
			case 5:
					exit(0);
					break;

			default:
					printf("n Wrong Choice:n");
					break;
		}
	}
	getch();
}
void create()
{
        struct node *temp,*ptr;
        temp=(struct node *)malloc(sizeof(struct node));
        if(temp==NULL)
        {
		printf("\nOut of Memory Space:\n");
		exit(0);
	}
	printf("\nEnter the data value for the node:\t");
	scanf("%d",&temp->info);
	temp->next=NULL;
	if(start==NULL)
	{
		start=temp;
	}
	else
	{
		ptr=start;
		while(ptr->next!=NULL)
		{
			ptr=ptr->next;
		}
		ptr->next=temp;
	}
}
void display()
{
	struct node *ptr;
	if(start==NULL)
	{
		printf("\nList is empty:\n");
		return;
	}
	else
	{
		ptr=start;
		printf("\nThe List elements are:\n");
		while(ptr!=NULL)
		{
			printf("%d\t",ptr->info );
			ptr=ptr->next ;
		}
	}
}

void insert_end()
{
	struct node *temp,*ptr;
	temp=(struct node *)malloc(sizeof(struct node));
	if(temp==NULL)
	{
		printf("\nOut of Memory Space:\n");
		return;
	}
	printf("\nEnter the data value for the node:\t" );
	scanf("%d",&temp->info );
	temp->next =NULL;
	if(start==NULL)
	{
		start=temp;
	}
	else
	{
		ptr=start;
		while(ptr->next !=NULL)
		{
			ptr=ptr->next ;
		}
		ptr->next =temp;
	}
}

void delete_begin()
{
	struct node *ptr;
	if(ptr==NULL)
	{
		printf("\nList is Empty:\n");
		return;
	}
	else
	{
		ptr=start;
		start=start->next ;
		printf("\nThe deleted element is :%d\t",ptr->info);
		free(ptr);
	}
}
